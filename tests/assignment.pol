</
    Math Library for Polaris.
/>

e : float constant = 2.71;
PI : float constant = 3.14159265;

print_to : (max: int) {
    if max > 0 {
        print max;
        print_to(max - 1);
    }
}

ret : (a: int) -> int {
    return a;
}

pow : (base: float, power: float) -> float {
    if power == 0 {
        return 1;
    }
    elif power < 0 {
        return 1.0 / (base * pow(base, -power));
    }
    else {
        return base * pow(base, power - 1);
    }
}

square : (base: float) -> float {
    return pow(base, 2);
}

cube : (base: float) -> float {
    return pow(base, 3);
}

deg_to_rad : (degree: float) -> float {
    return degree * (PI/180.0);
}

factorial : (n: int) -> int {
    if n < 0 {   
        return(-1);
    }
    if n == 0 {    
        return 1;
    }
    else {    
        return(n*factorial(n-1));        
    }  
} 

sin : (x: float constant) -> float {
    n : float = 0;
    result : float = 0;

    while n < 10 {
        result = result + ((pow(-1, n) * pow(x, (2 * n) + 1)) / (factorial((2 * n) + 1)));
        n = n + 1;
    }
    return result;
}

try_default : (b: int) {
    print b;
}

NL : char constant = '\n';

print ret(5), NL;
print pow(2, 3), NL;
print deg_to_rad(90), NL;
print sin(deg_to_rad(25)), NL;

character : char = 'a';
while (character <= 'z') {
    print character, ' ';
    character = character + 1;
}
print NL;

a : float = 2.3 + 4;
print a, NL;

print "exiting program...", NL;
